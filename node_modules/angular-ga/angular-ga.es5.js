import { EventEmitter, Inject, Injectable, InjectionToken, NgModule, Optional } from '@angular/core';
var GA_TOKEN = new InjectionToken('angular-ga TrackingId');
var GA_OPTIONS = new InjectionToken('angular-ga Tracking Options');
var GoogleAnalyticsService = /** @class */ (function () {
    /**
     * @param {?} trackingId
     * @param {?} options
     */
    function GoogleAnalyticsService(trackingId, options) {
        this.event = new EventEmitter();
        this.pageview = new EventEmitter();
        if (trackingId) {
            this.configure(trackingId, options);
        }
    }
    /**
     * @param {?} trackingId
     * @param {?=} options
     * @return {?}
     */
    GoogleAnalyticsService.prototype.configure = function (trackingId, options) {
        var _this = this;
        if (options === void 0) { options = 'auto'; }
        ga('create', trackingId, options);
        ga('send', 'pageview');
        this.event.subscribe(function (x) { return _this.onEvent(x); });
        this.pageview.subscribe(function (x) { return _this.onPageView(x); });
    };
    /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    GoogleAnalyticsService.prototype.set = function (key, value) {
        if (typeof key !== 'string' && typeof key !== 'object') {
            throw new TypeError("Expected `fieldName` to be of type `string` or `object`, got `" + typeof key + "`");
        }
        if (typeof key === 'string' && value === undefined) {
            throw new TypeError('Expected `fieldValue` to not be `undefined`');
        }
        if (typeof key === 'object') {
            ga('set', key);
        }
        else {
            ga('set', key, value);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GoogleAnalyticsService.prototype.onEvent = function (event) {
        ga('send', 'event', event.category, event.action, event.label, event.value);
    };
    /**
     * @param {?} pageview
     * @return {?}
     */
    GoogleAnalyticsService.prototype.onPageView = function (pageview) {
        var /** @type {?} */ fieldsObject = {};
        if (pageview.title) {
            fieldsObject.title = pageview.title;
        }
        ga('send', 'pageview', pageview.page, fieldsObject);
    };
    return GoogleAnalyticsService;
}());
GoogleAnalyticsService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
GoogleAnalyticsService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_TOKEN,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_OPTIONS,] },] },
]; };
var GoogleAnalyticsModule = /** @class */ (function () {
    function GoogleAnalyticsModule() {
    }
    /**
     * @return {?}
     */
    GoogleAnalyticsModule.forRoot = function () {
        return {
            ngModule: GoogleAnalyticsModule,
            providers: [
                GoogleAnalyticsService
            ]
        };
    };
    return GoogleAnalyticsModule;
}());
GoogleAnalyticsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: []
            },] },
];
/**
 * @nocollapse
 */
GoogleAnalyticsModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { GoogleAnalyticsModule, GoogleAnalyticsService, GA_TOKEN, GA_OPTIONS };
//# sourceMappingURL=angular-ga.es5.js.map

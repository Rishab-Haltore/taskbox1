{"version":3,"file":"angular-ga.umd.min.js","sources":["~/angular-ga/src/lib/ga.token.ts","~/angular-ga/src/lib/ga.service.ts","~/angular-ga/src/lib/ga.module.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ GA_TOKEN = new InjectionToken('angular-ga TrackingId');\nexport const /** @type {?} */ GA_OPTIONS = new InjectionToken('angular-ga Tracking Options');\n","import {Injectable, Inject, Optional, EventEmitter} from '@angular/core';\n\nimport {GA_TOKEN, GA_OPTIONS} from './ga.token';\nimport {Event} from './interfaces/event';\nimport {PageView} from './interfaces/pageview';\nimport {TrackingOptions} from './interfaces/tracking-options';\n\ndeclare const ga: any;\nexport class GoogleAnalyticsService {\n\tevent = new EventEmitter<Event>();\n\tpageview = new EventEmitter<PageView>();\n/**\n * @param {?} trackingId\n * @param {?} options\n */\nconstructor(\n\t\t  trackingId: string,\n\t\t  options: any\n\t) {\n\t\tif (trackingId) {\n\t\t\tthis.configure(trackingId, options);\n\t\t}\n\t}\n/**\n * @param {?} trackingId\n * @param {?=} options\n * @return {?}\n */\nconfigure(trackingId: string, options: TrackingOptions | string = 'auto') {\n\t\tga('create', trackingId, options);\n\t\tga('send', 'pageview');\n\n\t\tthis.event.subscribe((x: Event) => this.onEvent(x));\n\t\tthis.pageview.subscribe((x: PageView) => this.onPageView(x));\n\t}\n\n\tset(fieldsObject: any): void;\n\tset(fieldName: string, fieldValue: any): void;\n/**\n * @param {?} key\n * @param {?=} value\n * @return {?}\n */\nset(key: any, value?: any) {\n\t\tif (typeof key !== 'string' && typeof key !== 'object') {\n\t\t\tthrow new TypeError(`Expected \\`fieldName\\` to be of type \\`string\\` or \\`object\\`, got \\`${typeof key}\\``);\n\t\t}\n\n\t\tif (typeof key === 'string' && value === undefined) {\n\t\t\tthrow new TypeError('Expected `fieldValue` to not be `undefined`');\n\t\t}\n\n\t\tif (typeof key === 'object') {\n\t\t\tga('set', key);\n\t\t} else {\n\t\t\tga('set', key, value);\n\t\t}\n\t}\n/**\n * @param {?} event\n * @return {?}\n */\nprivate onEvent(event: Event) {\n\t\tga('send', 'event', event.category, event.action, event.label, event.value);\n\t}\n/**\n * @param {?} pageview\n * @return {?}\n */\nprivate onPageView(pageview: PageView) {\n\t\tconst /** @type {?} */ fieldsObject: any = {};\n\n\t\tif (pageview.title) {\n\t\t\tfieldsObject.title = pageview.title;\n\t\t}\n\n\t\tga('send', 'pageview', pageview.page, fieldsObject);\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_TOKEN, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_OPTIONS, ] }, ]},\n];\n}\n\nfunction GoogleAnalyticsService_tsickle_Closure_declarations() {\n/** @type {?} */\nGoogleAnalyticsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGoogleAnalyticsService.ctorParameters;\n/** @type {?} */\nGoogleAnalyticsService.prototype.event;\n/** @type {?} */\nGoogleAnalyticsService.prototype.pageview;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\n\nimport {GoogleAnalyticsService} from './ga.service';\nexport class GoogleAnalyticsModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: GoogleAnalyticsModule,\n\t\t\tproviders: [\n\t\t\t\tGoogleAnalyticsService\n\t\t\t]\n\t\t};\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\timports: [],\n\tdeclarations: [],\n\texports: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GoogleAnalyticsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nGoogleAnalyticsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGoogleAnalyticsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["GA_TOKEN","InjectionToken","GA_OPTIONS","GoogleAnalyticsService","trackingId","options","this","event","EventEmitter","pageview","configure","prototype","_this","ga","subscribe","x","onEvent","onPageView","set","key","value","TypeError","undefined","category","action","label","fieldsObject","title","page","decorators","type","Injectable","ctorParameters","Optional","Inject","args","GoogleAnalyticsModule","forRoot","ngModule","providers","NgModule","imports","declarations","exports"],"mappings":"qPAEO,IAAMA,EAAW,IAAIC,EAAAA,eAAe,yBAC9BC,EAAa,IAAID,EAAAA,eAAe,+BCK7CE,EAAA,WAOA,SAAAA,EACIC,EACAC,GARHC,KAADC,MAES,IAAIC,EAAAA,aADZF,KAADG,SAEY,IAAID,EAAAA,aAOVJ,GACHE,KAAKI,UAAUN,EAAYC,UAQ9BF,EAAAQ,UAAAD,UAAA,SALEN,EAAAC,GAKF,IAAAO,EAAAN,UALA,IAAAD,IAAEA,EAAF,QAMEQ,GALG,SAAUT,EAAYC,GAMzBQ,GALG,OAAQ,YAOXP,KALKC,MAAMO,UAAU,SAACC,GAAa,OAAAH,EAAKI,QAAQD,KAMhDT,KALKG,SAASK,UAAU,SAACC,GAAgB,OAAAH,EAAKK,WAAWF,MAe3DZ,EAAAQ,UAAAO,IAAA,SAVEC,EAAAC,GAWA,GAVmB,iBAARD,GAAmC,iBAARA,EAWrC,MAVM,IAAIE,UAAU,wEAA+EF,EAUtG,KAGE,GAVmB,iBAARA,GAAoBC,IAAUE,UAWxC,MAVM,IAAID,UAAU,+CAGF,iBAARF,EAWVN,GAVG,MAAOM,GAYVN,GAVG,MAAOM,EAAKC,IAIhBjB,EAAFQ,UAAAK,QAAE,SAAAT,GAcAM,GAbG,OAAQ,QAASN,EAAMgB,SAAUhB,EAAMiB,OAAQjB,EAAMkB,MAAOlB,EAAMa,QAGrEjB,EAAFQ,UAAAM,WAAE,SAAAR,GASA,IARMiB,KAkBFjB,EAhBSkB,QAiBZD,EAhBaC,MAAQlB,EAASkB,OAmB/Bd,GAhBG,OAAQ,WAAYJ,EAASmB,KAAMF,MApDxC,GAsDOvB,EAAP0B,aACEC,KAAMC,EAAAA,aAGP5B,EAAD6B,eAAC,WAAA,QAmBAF,KAAMR,UAAWO,aAAeC,KAAMG,EAAAA,WAAcH,KAAMI,EAAAA,OAAQC,MAAOnC,OACzE8B,KAAMR,UAAWO,aAAeC,KAAMG,EAAAA,WAAcH,KAAMI,EAAAA,OAAQC,MAAOjC,QCnF1E,IAAAkC,EAAA,WAAA,SAAAA,YAGEA,EAAFC,QACA,WACE,OACCC,SADUF,EAEVG,WACCpC,OARJ,GAWOiC,EAAPP,aACEC,KAAMU,EAAAA,SAAUL,OAEjBM,WACAC,gBACAC,eAGAP,EAADJ,eAAC,WAAA"}

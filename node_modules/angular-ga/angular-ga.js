import { EventEmitter, Inject, Injectable, InjectionToken, NgModule, Optional } from '@angular/core';

const GA_TOKEN = new InjectionToken('angular-ga TrackingId');
const GA_OPTIONS = new InjectionToken('angular-ga Tracking Options');

class GoogleAnalyticsService {
    /**
     * @param {?} trackingId
     * @param {?} options
     */
    constructor(trackingId, options) {
        this.event = new EventEmitter();
        this.pageview = new EventEmitter();
        if (trackingId) {
            this.configure(trackingId, options);
        }
    }
    /**
     * @param {?} trackingId
     * @param {?=} options
     * @return {?}
     */
    configure(trackingId, options = 'auto') {
        ga('create', trackingId, options);
        ga('send', 'pageview');
        this.event.subscribe((x) => this.onEvent(x));
        this.pageview.subscribe((x) => this.onPageView(x));
    }
    /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    set(key, value) {
        if (typeof key !== 'string' && typeof key !== 'object') {
            throw new TypeError(`Expected \`fieldName\` to be of type \`string\` or \`object\`, got \`${typeof key}\``);
        }
        if (typeof key === 'string' && value === undefined) {
            throw new TypeError('Expected `fieldValue` to not be `undefined`');
        }
        if (typeof key === 'object') {
            ga('set', key);
        }
        else {
            ga('set', key, value);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEvent(event) {
        ga('send', 'event', event.category, event.action, event.label, event.value);
    }
    /**
     * @param {?} pageview
     * @return {?}
     */
    onPageView(pageview) {
        const /** @type {?} */ fieldsObject = {};
        if (pageview.title) {
            fieldsObject.title = pageview.title;
        }
        ga('send', 'pageview', pageview.page, fieldsObject);
    }
}
GoogleAnalyticsService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
GoogleAnalyticsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_TOKEN,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_OPTIONS,] },] },
];

class GoogleAnalyticsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: GoogleAnalyticsModule,
            providers: [
                GoogleAnalyticsService
            ]
        };
    }
}
GoogleAnalyticsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: []
            },] },
];
/**
 * @nocollapse
 */
GoogleAnalyticsModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { GoogleAnalyticsModule, GoogleAnalyticsService, GA_TOKEN, GA_OPTIONS };
//# sourceMappingURL=angular-ga.js.map

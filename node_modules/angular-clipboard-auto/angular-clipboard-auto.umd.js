(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['angular-clipboard-auto'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CopyDirective = (function () {
    function CopyDirective(_el, _renderer) {
        this._el = _el;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    CopyDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ copy_icon = this._renderer.createElement('i');
        this._renderer.addClass(copy_icon, 'fa');
        this._renderer.addClass(copy_icon, 'fa-copy');
        this._renderer.addClass(copy_icon, 'angular-copy-icon');
        var /** @type {?} */ simple = this._renderer.listen(copy_icon, 'click', function (evt) {
            _this.copy(_this._el.nativeElement);
        });
        this._renderer.appendChild(this._el.nativeElement.parentNode, copy_icon);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CopyDirective.prototype.copy = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ input = event;
        input.select();
        document.execCommand('copy');
        input.setSelectionRange(-1, -1);
    };
    CopyDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[appCopy]'
                },] },
    ];
    /** @nocollapse */
    CopyDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    return CopyDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ClipboardModule = (function () {
    function ClipboardModule() {
    }
    /**
     * @return {?}
     */
    ClipboardModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ClipboardModule,
            providers: []
        };
    };
    ClipboardModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        CopyDirective
                    ],
                    exports: [
                        CopyDirective
                    ]
                },] },
    ];
    return ClipboardModule;
}());

exports.ClipboardModule = ClipboardModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
